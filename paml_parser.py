# PAMLparser. Outputs useful data from PAML outputs (baseml and codeml) in a # tab-delimited form, readable by Excel, etc.#! /usr/bin/env pythonimport sysimport reUsage = """You must give a file, and provide an output file name.    E.g., "paml_parser.py examplebaseml.output > cleanSummary.txt""""# User inputs file name at time the program is calledif len(sys.argv)<2:    sys.stderr.write(Usage)    exit()    InFileName= sys.argv[1]trees = []text = ""InFile = open(InFileName, 'r')for line in InFile:	if (re.match('^TREE', line)):		trees.append(text)		text = ""		text = text + line	trees.pop(0)# The following list contains regular expressions for the parts of the paml # outputs that were of interest to# Rothfels & Schuettpelz 2013 -- Accelerated Rate of Molecular Evolution for # Vittarioid Ferns is Strong and Not Due to Selection. Sys Bio.# Users should add or remove items to suit their specific needs.SearchStr_TREE='^(TREE) #\s*(\d*)'SearchStr_GeneNum='(Gene .+)'SearchStr_Ln='lnL\(ntime: (\d\d)  np:\s+(\d\d)\):\s+(-\d+\.\d+)'SearchStr_rates='(rates.*)\:\s+(1)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)'    #The number of repeats here needs to be changed to match the 	# number of partitions...SearchStr_prop='(proportion)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)'SearchStr_branch='(branch type \d:)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)'SearchStr_bgRates3='Rates for branch groups\n*\r*\s\s\s\s([\d\.]+)\s\s\s\s([\d\.]+)\s\s\s\s([\d\.]+)' #There are two 	# of these because some of my runs have three clocks and some have fourSearchStr_bgRates4='Rates for branch groups\n*\r*\s\s\s\s([\d\.]+)\s\s\s\s([\d\.]+)\s\s\s\s([\d\.]+)\s\s\s\s([\d\.]+)'SearchStr_ps='p:\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)'SearchStr_ws='w:\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)'SearchStr_wBnchMod3='w\s.+for branches:  ([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)\n' SearchStr_wBnchMod4='w\s.+for branches:  ([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)\s+([\d\.]+)' outputstring=""for tree in trees:	#print "TREE RECORD"	    #Tree Number	Result = re.search(SearchStr_TREE, tree) # Get the (captured) character 		# groups from the search 	if Result:		outputstring = outputstring + '\n\t\t%s %s\t\t\t' % (Result.group(1),Result.group(2))        #Likelihood and parameter number, etc	Result = re.search(SearchStr_Ln, tree)	if Result:		outputstring = outputstring + '%s\t%s\t\t%s\t\t\t' % (Result.group(1),Result.group(2),Result.group(3))	# I can't get these Branchgroup ones to work, for some reason. A 	# complication in how python deals with \n and/or \r?        #Branchgroup rates for three clocks	Result = re.search(SearchStr_bgRates3, tree)	if Result:		outputstring = outputstring + '%s\t%s\t%s\t' % (Result.group(1),Result.group(2),Result.group(3))        	#Branchgroup rates for four clocks	Result = re.search(SearchStr_bgRates4, tree)	if Result:		outputstring = outputstring + '%s\t%s\t%s\t%s\t' % (Result.group(1),Result.group(2),Result.group(3),Result.group(4))        	#Rates	Result = re.search(SearchStr_rates, tree)	if Result:		outputstring = outputstring + '%s\t%s\t%s\t%s\t%s\t%s\t%s\t\t' % (Result.group(1),Result.group(2),Result.group(3),Result.group(4),Result.group(5),Result.group(6),Result.group(7)) #again, needs to match the number of 		# partitions    	#Proportions	Result = re.search(SearchStr_prop, tree)	if Result:		outputstring = outputstring + '%s\t%s\t%s\t%s\t' % (Result.group(1),Result.group(2),Result.group(3),Result.group(4))	#Proportions for codeml model 2a	Result = re.search(SearchStr_ps, tree)	if Result:		outputstring = outputstring + 'proportions\t%s\t%s\t%s\t' % (Result.group(1),Result.group(2),Result.group(3))    	#Omegas for codeml model 2a	Result = re.search(SearchStr_ws, tree)	if Result:		outputstring = outputstring + '\t%s\t%s\t%s\t' % (Result.group(1),Result.group(2),Result.group(3))	#Omegas for codeml branch models, three clades	Result = re.search(SearchStr_wBnchMod3, tree)	if Result:		outputstring = outputstring + '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t%s\t%s\t%s\t' % (Result.group(1),Result.group(2),Result.group(3))	#Omegas for codeml branch models, four clades	Result = re.search(SearchStr_wBnchMod4, tree)	if Result:		outputstring = outputstring + '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t%s\t%s\t%s\t%s\t' % (Result.group(1),Result.group(2),Result.group(3),Result.group(4))	#Branch Types --This one is slightly different from the others (it has the 		# .join(x), etc.) because there are multiple lines starting with "		# branch type" within each "TREE" loop, and they need to 		# get concatenated together	Result = re.findall(SearchStr_branch, tree)	if Result:		for x in Result:			outputstring = outputstring + "\t".join(x) + "\t"print outputstring	